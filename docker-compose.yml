volumes:
  n8n_storage:
    external: true
  postgres_storage:
    external: true
  ollama_storage:
    external: true
  qdrant_storage:
    external: true

networks:
  demo:

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  networks: ['demo']
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET
    - WEBHOOK_URL=https://${HOSTNAME}:8443
    - OLLAMA_HOST=ollama:11434
  env_file:
    - .env

x-ollama: &service-ollama
  image: ollama/ollama:latest
  container_name: ollama
  networks: ['demo']
  restart: unless-stopped
  ports:
    - 11434:11434
  volumes:
    - ollama_storage:/root/.ollama

x-init-ollama: &init-ollama
  image: ollama/ollama:latest
  networks: ['demo']
  container_name: ollama-pull-llama
  volumes:
    - ollama_storage:/root/.ollama
  entrypoint: /bin/sh
  environment:
    - OLLAMA_HOST=ollama:11434
  command:
    - "-c"
    - "sleep 3; ollama pull llama3.2"

services:
  postgres:
    image: postgres:16-alpine
    hostname: postgres
    networks: ['demo']
    restart: unless-stopped
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10

  n8n-import:
    <<: *service-n8n
    hostname: n8n-import
    container_name: n8n-import
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n import:credentials --separate --input=/backup/credentials && n8n import:workflow --separate --input=/backup/workflows"
    volumes:
      - ./n8n/backup:/backup
    depends_on:
      postgres:
        condition: service_healthy

  n8n:
    <<: *service-n8n
    hostname: n8n
    container_name: n8n-container
    restart: unless-stopped
    # ports:
    #   - 5678:5678
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/backup:/backup
      - ./shared:/data/shared
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n-secure-router.rule=Host(`${HOSTNAME}`) && PathPrefix(`/`) && !PathPrefix(`/webhook`)"
      - "traefik.http.routers.n8n-secure-router.entrypoints=n8n-secure"
      - "traefik.http.routers.n8n-secure-router.tls=true"
      - "traefik.http.routers.n8n-secure-router.middlewares=n8n-auth@file"
      - "traefik.http.routers.n8n-secure-router.service=n8n-container"
      - "traefik.http.services.n8n-container.loadbalancer.server.port=5678"

      - "traefik.http.routers.n8n-webhook-router.rule=Host(`${HOSTNAME}`) && PathPrefix(`/webhook`)"
      - "traefik.http.routers.n8n-webhook-router.entrypoints=websecure"
      - "traefik.http.routers.n8n-webhook-router.tls=true"
      - "traefik.http.routers.n8n-webhook-router.service=n8n-container"
      - "traefik.http.services.n8n-container.loadbalancer.server.port=5678"

      - "traefik.http.routers.n8n-mcp-server.rule=Host(`${HOSTNAME}`) && PathPrefix(`/mcp`)"
      - "traefik.http.routers.n8n-mcp-server.entrypoints=websecure"
      - "traefik.http.routers.n8n-mcp-server.tls=true"
      - "traefik.http.routers.n8n-mcp-server.service=n8n-container"
      - "traefik.http.services.n8n-container.loadbalancer.server.port=5678"

    depends_on:
      postgres:
        condition: service_healthy
      n8n-import:
        condition: service_completed_successfully
  
  traefik:
    image: traefik:v3.3
    container_name: traefik
    restart: unless-stopped
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=demo"
      # - "--certificatesresolvers.default.acme.tlschallenge=true"
      # - "--certificatesresolvers.default.acme.email=admin@example.com"
      # - "--certificatesresolvers.default.acme.storage=/letsencrypt/acme.json"
      # - "--certificatesresolvers.default.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory"
      # - "--certificatesresolvers.letsencrypt.acme.email=admin@test.local"
      # - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      # - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      # - "--certificatesresolvers.letsencrypt.acme.caServer=https://acme-v02.api.letsencrypt.org/directory"
      # - "--log.level=DEBUG"
      - "--entrypoints.n8n-secure.address=:5678"
      - "--entrypoints.n8n-secure.http.tls=true"
      - "--entrypoints.n8n-secure.http.tls.domains[0].main=${HOSTNAME}"
      - "--entrypoints.n8n-secure.http.tls.domains[0].sans=${HOSTNAME}"
      - "--entrypoints.n8n-secure.http.tls.certresolver=default"

      - "--entrypoints.websecure.address=:8443"
      - "--entrypoints.websecure.http.tls=true"
      - "--entrypoints.websecure.http.tls.domains[0].main=${HOSTNAME}"
      - "--entrypoints.websecure.http.tls.domains[0].sans=${HOSTNAME}"
      - "--entrypoints.websecure.http.tls.certresolver=default"

      - "--providers.file.directory=/etc/traefik/dynamic"
      - "--providers.file.watch=true"
    ports:
      - 8443:8443
      - 5678:5678
      - 8080:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./certs:/etc/traefik/certs
      - ./traefik:/etc/traefik/dynamic
    networks: ['demo']

  qdrant:
    image: qdrant/qdrant
    hostname: qdrant
    container_name: qdrant
    networks: ['demo']
    restart: unless-stopped
    ports:
      - 6333:6333
    volumes:
      - qdrant_storage:/qdrant/storage

  ollama-cpu:
    profiles: ["cpu"]
    <<: *service-ollama

  ollama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *service-ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  ollama-gpu-amd:
    profiles: ["gpu-amd"]
    <<: *service-ollama
    image: ollama/ollama:rocm
    devices:
      - "/dev/kfd"
      - "/dev/dri"

  ollama-pull-llama-cpu:
    profiles: ["cpu"]
    <<: *init-ollama
    depends_on:
      - ollama-cpu

  ollama-pull-llama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *init-ollama
    depends_on:
      - ollama-gpu

  ollama-pull-llama-gpu-amd:
    profiles: [gpu-amd]
    <<: *init-ollama
    image: ollama/ollama:rocm
    depends_on:
     - ollama-gpu-amd
